metavar variable, x ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum }} 
metavar integer, n ::= {{ coq nat }} {{ lex  numeral }}
indexvar index, i, j ::= {{ coq nat }}

grammar
arith_expr, a :: ae_ ::=
    | x                                 ::  :: variable
    | n                                 ::  :: int
    | a1 + a2                           ::  :: addition
    | a1 * a2                           ::  :: multiplication

bool_expr, b :: be_ ::=
    | true                              ::  :: true
    | false                             ::  :: false
    | a1 < a2                           ::  :: less_than

commands, c :: cmd_ ::=
    | skip                              ::  :: skip
    | x := a                            ::  :: assignment
    | c1 ; c2                           ::  :: sequence
    | if b then c1 else c2 end          ::  :: if
    | while b do c end                  ::  :: while 

store, s :: store_ ::=
   | empty                              ::  :: empty
   | s [ x |-> n ]                      ::  :: cell

formula :: formula_ ::=
   | judgement                          ::  :: judgement
   | s ( x ) = n                        ::  :: lookup
   | n1 + n2 = n3                       ::  :: addition
   | n1 * n2 = n3                       ::  :: multiplication
   | n1 < n2 = true                     ::  :: lt_true
   | n1 < n2 = false                    ::  :: lt_false

terminals :: terminals_ ::=
  |  ->                                ::   :: arrow      {{ tex \rightarrow }}
  | |-                                 ::   :: turnstile  {{ tex \vdash }}
  | |->                                ::   :: mapsto     {{ tex \mapsto }}
  | -->                                ::   :: red        {{ tex \longrightarrow }}
  | ||                                 ::   :: bigstep    {{ tex \Downarrow }}
  | '{'                                ::   :: leftbrace  {{ tex \{ }}
  | '}'                                ::   :: rightbrace {{ tex \} }}
  | '<'                                ::   :: leftangle {{ tex \langle}}
  | '>'                                ::   :: rightangle {{ tex \rangle}}

%----------------------------------------------------------------%
%                    BIG-STEP SEMANTICS                        %
%----------------------------------------------------------------%
defns
Jop :: '' ::= 

%%%%%%%%%%%%%%%%%%%%%%%%%%% Arithmetic Expressions %%%%%%%%%%%%%%%%%%%%%%%%%%%
defn 
< a , s > || < a' , s' > :: :: arith_ops :: 'aexp_' by

----------------- :: int_constant
<n, s> || <n, s>

s(x) = n
----------------- :: lookup
<x, s> || <n, s>

%%% Addition %%%
<a1, s> || <n1, s>
<a2, s> || <n2, s>
n1 + n2 = n3
------------------------------ :: add
<a1 + a2, s> || <n3, s>


%%% Multiplication %%%
<a1, s> || <n1, s>
<a2, s> || <n2, s>
n1 * n2 = n3
------------------------------ :: mult
<a1 * a2, s> || <n3, s>

%%%%%%%%%%%%%%%%%%%%%%%%%%% Boolean Expressions %%%%%%%%%%%%%%%%%%%%%%%%%%%
defn 
< b , s > || < b' , s' > :: :: bool_ops :: 'bexp_' by

<a1, s> || <n1, s>
<a2, s> || <n2, s>
n1 < n2 = true
------------------------------ :: lt_true
<a1 < a2, s> || <true, s>

<a1, s> || <n1, s>
<a2, s> || <n2, s>
n1 < n2 = false
------------------------------ :: lt_false
<a1 < a2, s> || <false, s>


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Commands %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
defn 
< c , s > || < c' , s' > :: :: cmd_ops :: 'cmd_' by

%%% Assignment %%%
<a, s> || <n, s>
----------------------------- :: assign
<x := a, s> || <skip, s[x |-> n]>

%%% Sequence %%%
<c1, s> || <skip, s'>
<c2, s'> || <skip, s''>
-------------------------------- :: sequence
<c1 ; c2, s> || <skip, s''>

%%% If %%%
<b, s> || <true, s>
<c1, s> || <skip, s'>
---------------------------------------------------------------- :: if_true
<if b then c1 else c2 end, s> || <skip, s'>

<b, s> || <false, s>
<c2, s> || <skip, s'>
---------------------------------------------------------------- :: if_false
<if b then c1 else c2 end, s> || <skip, s'>

%%% While %%%
<b, s> || <true, s>
<c, s> || <skip, s'>
<while b do c end, s'> || <skip, s''>
--------------------------------------------------------------------------- :: while_true
<while b do c end, s> || <skip, s''>

<b, s> || <false, s>
--------------------------------------------------------------------------- :: while_false
<while b do c end, s> || <skip, s>
