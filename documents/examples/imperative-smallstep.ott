metavar variable, x ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum }}
metavar channel, ch ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum }}
metavar integer, n ::= {{ coq nat }} {{ lex  numeral }}
indexvar index, i, j ::= {{ coq nat }}

grammar
arith_expr, a :: ae_ ::=
    | x                                 ::  :: variable
    | n                                 ::  :: int
    | a1 + a2                           ::  :: addition
    | a1 * a2                           ::  :: multiplication

bool_expr, b :: be_ ::=
    | true                              ::  :: true
    | false                             ::  :: false
    | a1 < a2                           ::  :: less_than

commands, cmd :: cmd_ ::=
    | stop                              ::  :: stop
    | skip                              ::  :: skip
    | x := a                            ::  :: assignment
    | cmd1 ; cmd2                       ::  :: sequence
    | if b then cmd1 else cmd2 end      ::  :: if
    | while b do cmd end                ::  :: while
    | read x from ch                     ::  :: read
    | write x to ch                      ::  :: write

memory, m :: memory_ ::=
   | empty                              ::  :: empty
   | m [ x |-> n ]                      ::  :: update_variable
   | m [ ch |-> n ]                      ::  :: update_channel

output, o :: output_ ::=
   | none                               ::  :: none
   | o '::' ( ch - n )                  ::  :: append

formula :: formula_ ::=
   | judgement                          ::  :: judgement
   | m ( x ) = n                        ::  :: lookup
   | m ( ch ) = n                        ::  :: channel_lookup
   | n1 + n2 = n3                       ::  :: addition
   | n1 * n2 = n3                       ::  :: multiplication
   | n1 < n2 = true                     ::  :: lt_true
   | n1 < n2 = false                    ::  :: lt_false

terminals :: terminals_ ::=
  |  <-                                ::   :: arrow      {{ tex \leftarrow }}
  | |-                                 ::   :: turnstile  {{ tex \vdash }}
  | |->                                ::   :: mapsto     {{ tex \mapsto }}
  | -->                                ::   :: red        {{ tex \longrightarrow }}
  | '{'                                ::   :: leftbrace  {{ tex \{ }}
  | '}'                                ::   :: rightbrace {{ tex \} }}
  | '<'                                ::   :: leftangle {{ tex \langle}}
  | '>'                                ::   :: rightangle {{ tex \rangle}}

%----------------------------------------------------------------%
%                    SMALL-STEP SEMANTICS                        %
%----------------------------------------------------------------%
defns
Jop :: '' ::= 

%%%%%%%%%%%%%%%%%%%%%%%%%%% Arithmetic Expressions %%%%%%%%%%%%%%%%%%%%%%%%%%%
defn 
< a , m , o > --> < a' , m' , o' > :: :: arith_ops :: 'aexp_' by

----------------- :: int_constant
<n, m, o> --> <n, m, o>

m(x) = n
----------------- :: lookup
<x, m, o> --> <n, m, o>

%%% Addition %%%
<a1, m, o> --> <a1', m, o>
------------------------------ :: add_aexp_aexp
<a1 + a2, m, o> --> <a1' + a2, m, o>

<a2, m, o> --> <a2', m, o>
----------------------------- :: add_int_aexp
<n1 + a2, m, o> --> <n1 + n2, m, o>

n1 + n2 = n3
------------------------:: add_int_int
<n1 + n2, m, o> --> <n3, m, o>

%%% Multiplication %%%
<a1, m, o> --> <a1', m, o>
------------------------------ :: mult_aexp_aexp
<a1 * a2, m, o> --> <a1' * a2, m, o>

<a2, m, o> --> <a2', m, o>
----------------------------- :: mult_int_aexp
<n1 * a2, m, o> --> <n1 * n2, m, o>

n1 * n2 = n3
------------------------ :: mult_int_int
<n1 * n2, m, o> --> <n3, m, o>

%%%%%%%%%%%%%%%%%%%%%%%%%%% Boolean Expressions %%%%%%%%%%%%%%%%%%%%%%%%%%%
defn 
< b , m , o > --> < b' , m' , o' > :: :: bool_ops :: 'bexp_' by

<a1, m, o> --> <a1', m, o>
------------------------------ :: lt_aexp_aexp
<a1 < a2, m, o> --> <a1' < a2, m, o>

<a2, m, o> --> <a2', m, o>
----------------------------- :: lt_int_aexp
<n1 < a2, m, o> --> <n1 < n2, m, o>

n1 < n2 = true
------------------------ :: lt_int_int
<n1 < n2, m, o> --> <true, m, o>

n1 < n2 = false
------------------------ :: lt_int_int
<n1 < n2, m, o> --> <false, m, o>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Commands %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
defn 
< cmd , m , o > --> < cmd' , m' , o' > :: :: cmd_ops :: 'cmd_' by

%%% Assignment %%%
<a, m, o> --> <a', m, o>
----------------------------- :: assign_aexp
<x := a, m, o> --> <x := a', m, o>

----------------------------- :: assign_int
<x := n, m, o> --> <stop, m[x |-> n], o>

%%% Sequence %%%
<cmd1, m, o> --> <cmd1', m', o'>
-------------------------------- :: seq1
<cmd1 ; cmd2, m, o> --> <cmd1' ; cmd2, m', o'>

--------------------------- :: seq2
<skip ; cmd2, m, o> --> <cmd2, m, o>


%%% If %%%
<b, m, o> --> <b', m, o>
---------------------------------------------------------------- :: if_eval
<if b then cmd1 else cmd2 end, m, o> --> <if b' then cmd1 else cmd2 end, m, o>

---------------------------------------------------------------- :: if_true
<if true then cmd1 else cmd2 end, m, o> --> <cmd1, m, o>

---------------------------------------------------------------- :: if_false
<if false then cmd1 else cmd2 end, m, o> --> <cmd2, m, o>

%%% While %%%
--------------------------------------------------------------------------- :: while
<while b do cmd end, m, o> --> <if b then cmd ; while b do cmd end else skip end, m, o>

%%% Read %%%
m(ch) = n
--------------------------------------------------------------------------- :: read
<read x from ch, m, o> --> <stop, m[x |-> n], o>

%%% Write %%%
m(x) = n
--------------------------------------------------------------------------- :: write
<write x to ch, m, o> --> <stop, m[ch |-> n], o::(ch - n)>
